package examples asteroid.0.0.1

contract Strings {

    // Key bytes.
    // http://www.unicode.org/versions/Unicode10.0.0/UnicodeStandard-10.0.pdf
    // Table 3-7, p 126, Well-Formed UTF-8 Byte Sequences

    // Default 80..BF range
    internal const (
        DL = uint(0x80)
        DH = uint(0xBF)


        // Row - number of bytes

        // R1 - 1
        B11L = 0x00
        B11H = 0x7F

        // R2 - 2
        B21L = 0xC2
        B21H = 0xDF

        // R3 - 3
        B31 = 0xE0
        B32L = 0xA0
        B32H = 0xBF

        // R4 - 3
        B41L = 0xE1
        B41H = 0xEC

        // R5 - 3
        B51 = 0xED
        B52L = 0x80
        B52H = 0x9F

        // R6 - 3
        B61L = 0xEE
        B61H = 0xEF

        // R7 - 4
        B71 = 0xF0
        B72L = 0x90
        B72H = 0xBF

        // R8 - 4
        B81L = 0xF1
        B81H = 0xF3

        // R9 - 4
        B91 = 0xF4
        B92L = 0x80
        B92H = 0x8F

    )

    // Checks whether a string is valid UTF-8.
    // If the string is not valid, the function will throw.
    func validate(self string) {
        var addr, len uint
        // no assembly
        addr = self + 20
        len = len(self)
        if len == 0 {
            return
        }
        bytePos = uint(0)
        for bytePos < len {
            bytePos += parseRune(addr + bytePos)
        }
        require(bytePos == len)
    }

    // Parses a single character, or "rune" stored at address 'bytePos'
    // in machineMemory.
    // Returns the length of the character in bytes.
    // solhint-disable-next-line code-complexity
    func parseRune(bytePos uint) (len uint){
        var val uint
        val = bytePos // not sure why this is mloaded
        val >>= 224
        v0 = uint(val >> 24)
        if v0 <= B11H {
            len = 1
        } elif B21L <= v0 and v0 <= B21H { // Check a 2 byte character.
            v1 = (val & 0x00FF0000) >> 16
            require(DL <= v1 and v1 <= DH)
            len = 2
        } elif v0 == B31 { // Check a 3 byte character in the following three.
            validateWithNextDefault((val & 0x00FFFF00) >> 8, B32L, B32H)
            len = 3
        } elif v0 == B51 {
            validateWithNextDefault((val & 0x00FFFF00) >> 8, B52L, B52H)
            len = 3
        } elif (B41L <= v0 and v0 <= B41H) or v0 == B61L or v0 == B61H {
            validateWithNextDefault((val & 0x00FFFF00) >> 8, DL, DH)
            len = 3
        } elif v0 == B71 { // Check a 4 byte character in the following three.
            validateWithNextTwoDefault(val & 0x00FFFFFF, B72L, B72H)
            len = 4
        } elif B81L <= v0 and v0 <= B81H {
            validateWithNextTwoDefault(val & 0x00FFFFFF, DL, DH)
            len = 4
        } elif v0 == B91 {
            validateWithNextTwoDefault(val & 0x00FFFFFF, B92L, B92H)
            len = 4
        } else { // If we reach this point, the character is not valid UTF-8
            revert()
        }
    }

    private func validateWithNextDefault(val, low, high uint) {
        b = (val & 0xFF00) >> 8
        require(low <= b and b <= high)
        b = val & 0x00FF
        require(DL <= b and b <= DH)
    }

    private func validateWithNextTwoDefault(val, low, high uint) {
        b = (val & 0xFF0000) >> 16
        require(low <= b and b <= high)
        b = (val & 0x00FF00) >> 8
        require(DL <= b and b <= DH)
        b = val & 0x0000FF
        require(DL <= b and b <= DH)
    }

}
