package solc asteroid.0.0.1

contract Ballot {

    class Voter {
        var weight uint
        var voted bool
        var delegate address
        var vote uint
    }

    class Proposal {
        var name bytes32
        var voteCount uint
    }

    external var (
        chairperson address
        voters map[address]Voter
        proposals []Proposal
    )

    external func giveRightToVote(voter address){
        assert(msg.sender == chairperson)
        assert(!voters[voter].voted)
        assert(voters[voter].weight == 0)
        voters[voter].weight  = 1
    }

    external func castVote(proposal uint) {
        sender = voters[msg.sender]
        assert(!sender.voted)

        sender.voted = true
        sender.vote = proposal

        proposals[proposal].voteCount += sender.weight
    }

    external func winningProposal() (winner uint) {
        winningVoteCount = uint(0)
        for p = 0; p < len(proposals); p++ {
            if proposals[p].voteCount > winningVoteCount {
                winningVoteCount = proposals[p].voteCount
                winner = p
            }
        }
        return winner
    }


    external func delegateTo(to address){
        sender = voters[msg.sender]
        assert(!sender.voted)
        assert(to != msg.sender)

        for voters[to].delegate != address(0) {
            to = voters[to].delegate
            assert(to != msg.sender)
        }

        sender.voted = true
        sender.delegate = to
        d = voters[to]
        if d.voted {
            proposals[d.vote].voteCount += sender.weight
        } else {
            d.weight += sender.weight
        }

    }

    external func winnerName() string {
        return proposals[winningProposal()].name
    }

}
